m6w1d1 - IL NOSTRO PRIMO API
  STRIVE BLOG
  - Sei responsabile della creazione di una serie di WebAPI per l'applicazione Strive Blog
  - (Ti abbiamo fornito un frontend in React per semplificare il lavoro) => non servirà a meno che non eseguirai gli esercizi EXTRA (facoltativi)
  - Oggi ti occuperai di creare e visualizzare gli autori dei blog
  - Nelle prossime slide troverai come strutturare i tuoi documenti mongo e quali rotte creare

  STRIVE BLOG - STRUTTURA
  _id               // generato da mongo
  nome              //stringa
  cognome           //stringa
  email             //stringa
  data di nascita   //stringa
  avatar            //stringa

  STRIVE BLOG - ROTTE
  OK - GET /authors => ritorna la lista degli autori
  OK - GET /authors/123 => ritorna il singolo autore
  OK - POST /authors => crea un nuovo autore

  STRIVE BLOG - EXTRA (facoltativi, per ora)
  OK - PUT /authors/123 => modifica l'autore con l'id associato
  OK - DELETE /authors/123 => cancella l'autore con l'id associato
  OK - Connessione del backend al frontend
    - Nota: Se vuoi connettere il backend e frontend oggi dovrai installare il pacchetto 'cors' con il comando 'npm i cors'
    - Dovrai quindi importarlo con un import statement
    - Puoi usare cors col seguente comando 'server.use(cors())'
    - Impareremo cos'è CORS prossimamente ;

m6w1d4 - IL NOSTRO PRIMO API
  STRIVE BLOG - CAPITOLO 2
  OK - Se non lo hai fatto, implementa le funzionalità di PUT e DELETE per gli autori
  OK - Sviluppa le operazioni CRUD per i blog post (struttura nelle slide successive)
  OK - Aggiungi funzionalità di paginazione sia per gli autori che per i blog posts
  NOTA: ricorda di installare il pacchetto 'cors' con 'npm i cors', e di usarlo con 'server.use(cors())' se vuoi collegare il backend al frontend

  STRIVE BLOG - STRUTTURA BLOG POST
  {
  _id         // generato dal server,
  category    // categoria del post,
  title       // titolo del post,
  cover       // link dell'immagine,
  readTime: {
      value   // numero,
      unit    // unità di misura
  },
  author      // email dell'autore del post,
  content:    // HTML dell'articolo
  }

  STRIVE BLOG - ROTTE
  OK - GET /blogPosts => ritorna una lista di blog post
  OK - GET /blogPosts/123 => ritorna un singolo blog post
  OK - POST /blogPosts => crea un nuovo blog post
  OK - PUT /blogPosts/123 => modifica il blog post con l'id associato
  OK - DELETE /blogPosts/123 => cancella il blog post con l'id associato

  STRIVE BLOG - EXTRA (facoltativi, per ora)
  OK - Fare la POST di un articolo dal form di aggiunta articolo
  OK - Fare la fetch degli articoli presenti nel database e visualizzarli nella homepage
  OK - GET /authors/:id/blogPosts/ => ricevi tutti i blog post di uno specifico autore dal corrispondente ID
  OK - GET /blogPosts?title=whatever => filtra i blog post e ricevi l'unico che corrisponda alla condizione di ricerca (es: titolo contiene "whatever")
  OK - Aggiungi la funzionalità di ricerca dei post nel frontend

  m6w2d4 - IL NOSTRO PRIMO API
    UPLOAD DI IMMAGINI
    - Il backend dovrebbe includere queste nuove routes:
      OK - PATCH /authors/:authorId/avatar, carica un'immagine per l'autore specificato e salva l'URL creata da Cloudinary nel database.
      OK - PATCH /blogPosts/:blogPostId/cover, carica un'immagine per il post specificato dall'id. Salva l'URL creato da Cloudinary nel post corrispondente.
      OK - EXTRA (facoltativi!): Invia un email all'autore quando pubblica un nuovo blog post e quando un nuovo autore si registra sulla piattaforma.
      OK - Assicurati di inserire l'API key e l'API secret di Cloudinary sul tuo .env
      OK - Assicurati di importare "dotenv/config" per inizializzare dotenv (non è necessario installarlo)
      OK - Assicurati di avere la key di sendgrid nel tuo .env sotto la voce SENDGRID_API_KEY

  m6w2d4 - IL NOSTRO PRIMO API
    Aggiungiamo al nostro backend la possibilità di aggiungere commenti agli articoli. Il modo migliore per unire i commenti ai post in questo caso è l'embedding.
    - Implementa i seguenti endpoints:
      - GET /blogPosts/:id/comments => ritorna tutti commenti di uno specifico post
      - GET /blogPosts/:id/comments/:commentId => ritorna un commento specifico di un post specifico
      - POST /blogPosts/:id => aggiungi un nuovo commento ad un post specifico
      - PUT /blogPosts/:id/comment/:commentId => cambia un commento di un post specifico
      - DELETE /blogPosts/:id/comment/:commentId => elimina un commento specifico da un post specifico.